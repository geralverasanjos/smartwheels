
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check user role from their profile
    function getRole(userId, role) {
      return get(/databases/$(database)/documents/$(role)s/$(userId)).data.role == role;
    }

    // Profiles can be read by any authenticated user, but only updated by the owner.
    match /passengers/{userId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isOwner(userId);
    }

    match /drivers/{userId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isOwner(userId);
    }
    
    match /fleet-managers/{userId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isOwner(userId);
    }
    
    // Ride Requests
    match /rideRequests/{rideId} {
      // Passengers can create requests and read/update their own requests.
      // Drivers can read all pending requests and update requests they have accepted.
      allow read: if isAuthenticated();
      allow create: if isOwner(resource.data.passengerId);
      allow update: if (isOwner(resource.data.passengerId) && request.resource.data.status == 'cancelled') || 
                       (isAuthenticated() && getRole(request.auth.uid, 'driver'));
    }

    // Trips collection (history)
    match /trips/{tripId} {
        // Only the passenger or driver involved can read it.
        // Trips are created by the server-side logic (or a trusted role), so creation is restricted.
        allow read: if isAuthenticated() && (isOwner(resource.data.passengerId) || isOwner(resource.data.driverId));
        allow create: if isAuthenticated(); // Should be locked down further in production with Cloud Functions
        allow update, delete: if false; // History should be immutable
    }

    // Messages within a ride
    match /messages/{messageId} {
        // Only passenger or driver involved in the ride can read/write messages
        allow read, write: if isAuthenticated() && 
                             (get(/databases/$(database)/documents/rideRequests/$(request.resource.data.rideId)).data.passengerId == request.auth.uid ||
                              get(/databases/$(database)/documents/rideRequests/$(request.resource.data.rideId)).data.driverId == request.auth.uid);
    }
    
     // Vehicles can be read by anyone, but only created/updated by their driver owner or a fleet manager.
    match /vehicles/{vehicleId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && getRole(request.auth.uid, 'driver');
    }

    // Promotions can be read by anyone, but only managed by drivers or fleet managers
    match /driver_promotions/{promoId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAuthenticated() && getRole(request.auth.uid, 'driver');
    }
     match /fleet_promotions/{promoId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAuthenticated() && getRole(request.auth.uid, 'fleet-manager');
    }
    
    // Taxi stands can be read by anyone, but only managed by drivers or fleet managers
    match /taxi_stands/{standId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAuthenticated() && (getRole(request.auth.uid, 'driver') || getRole(request.auth.uid, 'fleet-manager'));
    }

  }
}
