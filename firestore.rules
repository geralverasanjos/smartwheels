
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isDriver() {
        return exists(/databases/$(database)/documents/drivers/$(request.auth.uid));
    }

    function isPassenger() {
        return exists(/databases/$(database)/documents/passengers/$(request.auth.uid));
    }
    
    function isFleetManager() {
        return exists(/databases/$(database)/documents/fleet-managers/$(request.auth.uid));
    }
    
    // Profile Collections
    match /passengers/{userId} {
      allow read, update: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated();
    }

    match /drivers/{userId} {
      allow read, update: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated();
    }
    
    match /fleet-managers/{userId} {
       allow read, update: if isAuthenticated() && isOwner(userId);
       allow create: if isAuthenticated();
    }
    
    // Ride Request Collection
    match /rideRequests/{requestId} {
      allow read: if isAuthenticated(); // Allow drivers to read pending requests
      allow create: if isPassenger() && isOwner(request.resource.data.passengerId);
      allow update: if (isDriver() && resource.data.driverId == request.auth.uid) || 
                      (isPassenger() && resource.data.passengerId == request.auth.uid);
    }
    
    // Trips (History) Collection
    match /trips/{tripId} {
        allow read: if isAuthenticated() && (resource.data.driverId == request.auth.uid || resource.data.passengerId == request.auth.uid);
        allow create: if isAuthenticated(); // Should be created by a server-side process, but allow for now.
    }
    
    // Vehicles Collection
    match /vehicles/{vehicleId} {
        // Assuming drivers own their vehicles or are associated with a fleet
        // A more complex rule would check fleet ownership
        allow read: if isAuthenticated();
        allow create, update: if isDriver() || isFleetManager();
    }
    
    // Messages Collection
    match /messages/{messageId} {
        // Only participants of a ride can read/write messages for that ride
        allow read, create: if isAuthenticated() && 
                              exists(/databases/$(database)/documents/rideRequests/$(request.resource.data.rideId)) &&
                              (get(/databases/$(database)/documents/rideRequests/$(request.resource.data.rideId)).data.passengerId == request.auth.uid ||
                               get(/databases/$(database)/documents/rideRequests/$(request.resource.data.rideId)).data.driverId == request.auth.uid);
    }
    
    // Transactions Collection
    match /transactions/{transactionId} {
        allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
    
    // Promotions Collection
    match /promotions/{promotionId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isDriver() || isFleetManager();
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
