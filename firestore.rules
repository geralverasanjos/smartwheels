
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /passengers/{userId} {
      allow read, write: if isOwner(userId);
    }

    match /drivers/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    match /fleet-managers/{userId} {
        allow read, write: if isOwner(userId);
    }

    match /vehicles/{vehicleId} {
        allow read: if request.auth != null;
        allow create, update, delete: if isOwner(request.resource.data.driverId);
    }

    match /promotions/{promoId} {
        allow read: if request.auth != null;
        allow create, update, delete: if request.auth != null; 
    }

    match /payoutMethods/{methodId} {
      allow read, delete: if isOwner(resource.data.userId);
      allow create, update: if isOwner(request.resource.data.userId);
    }
    
    match /transactions/{transactionId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read: if isOwner(resource.data.userId);
      allow list: if request.auth.uid == request.query.where.userId;
    }
    
    match /rideRequests/{requestId} {
        allow read, update: if request.auth != null;
        allow create: if isOwner(request.resource.data.passengerId);
    }
    
    match /messages/{messageId} {
        allow read, create: if request.auth != null;
    }

    match /stands/{standId} {
        allow read: if request.auth != null;
        allow create, update, delete: if request.auth != null;
    }
    
     match /driverLocations/{driverId} {
        allow read: if request.auth != null;
        allow write: if isOwner(driverId);
    }
  }
}
