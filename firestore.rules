
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Passengers can read/write their own profile
    match /passengers/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // Drivers can read/write their own profile
    match /drivers/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      // Fleet managers can read their drivers' profiles
      allow get: if isAuthenticated() && get(/databases/$(database)/documents/fleet-managers/$(request.auth.uid)).data.id == resource.data.fleetManagerId;
    }

    // Fleet managers can read/write their own profile
    match /fleet-managers/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }
    
    // Vehicles can be read by any authenticated user, but only written by their driver owner
    match /vehicles/{vehicleId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(resource.data.driverId);
    }

    // Ride requests can be created by passengers, and then managed by assigned drivers
    match /rideRequests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.passengerId == request.auth.uid;
      allow update: if isAuthenticated(); // Allow drivers/system to update status
    }
    
    // Messages can be read/written by the passenger or the driver involved in the ride
    match /messages/{messageId} {
       allow read, create: if isAuthenticated();
    }
    
    // Trips can be read by the passenger or the driver involved
    match /trips/{tripId} {
       allow read: if isAuthenticated() && (resource.data.passengerId == request.auth.uid || resource.data.driverId == request.auth.uid);
       allow create: if isAuthenticated(); // Allow system/drivers to create trip records
    }
    
    // Transactions can be read/written by the user they belong to
    match /transactions/{transactionId} {
        allow read, create: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Payout methods can be managed by the user they belong to
    match /payoutMethods/{methodId} {
        allow read, create, update, delete: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }

    // Stands can be read by any authenticated user, but only managed by drivers/fleet managers
    match /stands/{standId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && (get(/databases/$(database)/documents/drivers/$(request.auth.uid)) != null || get(/databases/$(database)/documents/fleet-managers/$(request.auth.uid)) != null);
    }

    // Ratings can be created by the user who took the ride
    match /ratings/{ratingId} {
        allow create: if isAuthenticated() && request.resource.data.raterId == request.auth.uid;
    }
  }
}
