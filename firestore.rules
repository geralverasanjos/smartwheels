
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Allow public read of vehicles, but only authenticated writes
    match /vehicles/{vehicleId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Drivers can read/write their own profile
    match /drivers/{driverId} {
      allow read, write: if request.auth != null && request.auth.uid == driverId;
    }

    // Passengers can read/write their own profile
    match /passengers/{passengerId} {
      allow read, write: if request.auth != null && request.auth.uid == passengerId;
    }
    
    // Fleet managers can read/write their own profile
    match /fleet-managers/{managerId} {
      allow read, write: if request.auth != null && request.auth.uid == managerId;
    }

    // Ride Requests
    match /rideRequests/{requestId} {
      // Passengers can create their own requests
      allow create: if request.auth != null && request.resource.data.passengerId == request.auth.uid;
      // Authenticated users involved in the ride (passenger or driver) can read it
      allow read: if request.auth != null && (request.auth.uid == resource.data.passengerId || request.auth.uid == resource.data.driverId);
      // Drivers can accept/update rides. Passengers can cancel their own.
      allow update: if request.auth != null && 
                    ((request.auth.uid == resource.data.driverId) || (request.auth.uid == request.resource.data.driverId) ||
                     (request.auth.uid == resource.data.passengerId && request.resource.data.status == 'cancelled'));
    }

    // Chat messages can be read by participants, and created by them.
    match /messages/{messageId} {
      allow read, create: if request.auth != null && get(/databases/$(database)/documents/rideRequests/$(request.resource.data.rideId)).data.passengerId == request.auth.uid || get(/databases/$(database)/documents/rideRequests/$(request.resource.data.rideId)).data.driverId == request.auth.uid;
    }
    
    // Trips history can be read by the passenger or driver involved.
    match /trips/{tripId} {
       allow read: if request.auth != null && (request.auth.uid == resource.data.passengerId || request.auth.uid == resource.data.driverId);
       // Writing trips is handled by server-side logic (e.g. Cloud Functions), so client-side write is disabled.
       allow write: if false; 
    }
    
  }
}
