rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Allow public read access to taxi stands
    match /stands/{standId} {
      allow read: if true;
      allow write: if request.auth != null; // Simplistic rule, refine as needed (e.g., only fleet-managers or admins)
    }

    // Rules for user profiles
    match /{role}/{userId} where role in ['passengers', 'drivers', 'fleet-managers'] {
      // Users can read their own profile
      allow get: if request.auth != null && request.auth.uid == userId;
      // Users can update their own profile
      allow update: if request.auth != null && request.auth.uid == userId;
      // Users can create their own profile during signup
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow authenticated users to read driver/fleet-manager profiles (e.g., for viewing on a map or in history)
      allow list: if request.auth != null; 
    }

    // Rules for ride requests
    match /rideRequests/{requestId} {
      // Passengers can create their own requests
      allow create: if request.auth != null && request.resource.data.passengerId == request.auth.uid;
      // Passenger and assigned driver can read the request
      allow get: if request.auth != null && (request.auth.uid == resource.data.passengerId || request.auth.uid == resource.data.driverId);
      // Driver or system can update the request (e.g., accept, change status)
      allow update: if request.auth != null; // Simplified - refine to specific roles/conditions
    }

    // Rules for driver locations
    match /driverLocations/{driverId} {
      // Authenticated users can see where drivers are
      allow read: if request.auth != null;
      // Only the driver themselves can update their own location
      allow write: if request.auth != null && request.auth.uid == driverId;
    }

    // Rules for transactions
    match /transactions/{transactionId} {
      // Users can only read their own transactions
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      // Transactions should be created by backend functions, not directly by clients
      allow write: if false; 
    }
    
    // Rules for trip history
    match /trips/{tripId} {
      // Passenger or driver involved in the trip can read it.
      allow read: if request.auth != null && (request.auth.uid == resource.data.passengerId || request.auth.uid == resource.data.driverId);
       // Trip history should be created by backend functions
      allow write: if false;
    }

    // Rules for payment methods
    match /payoutMethods/{methodId} {
      // A user can read/write/delete their own payment methods
      allow read, write, delete: if request.auth != null && resource.data.userId == request.auth.uid;
       allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
  }
}
